#!/usr/bin/env node

/* eslint-disable comma-dangle, import/no-dynamic-require, global-require */
const path = require('path');
const express = require('express');
const http = require('http');
const webpack = require('webpack');
const webpackDevMiddleware = require('webpack-dev-middleware');
const webpackHotMiddleware = require('webpack-hot-middleware');
const logger = require('./utils/logger');

const webpackClientConfig = require('../config/webpack/client.config');
const webpackServerConfig = require('../config/webpack/server.config');

const html = require('../src/index.html');

let bundledServer;

const compiler = {
  client: webpack(webpackClientConfig({ optimize: false })),
  server: webpack(webpackServerConfig({ optimize: false }))
};

compiler.server.watch({}, (err) => {
  if (!err) {
    const file = '../build/server.js';
    delete require.cache[require.resolve(file)];
    bundledServer = require(file);
  }

  logger.info('Finished building server code');
});

// @TODO this instance must be updated after the compiler.server finishes
const app = express();

app.set('env', 'DEBUG');

app.use(logger.request);

app.use(webpackDevMiddleware(compiler.client, {
  publicPath: '/assets/',
  noInfo: true,
  serverSideRender: true,
  hot: true
}));
app.use(webpackHotMiddleware(compiler.client));
app.use('/assets', express.static(path.join(__dirname, '../build')));
app.use((req, res) => {
  res.status(200).send(html({
    body: bundledServer.render(req, res),
    manifest: res.locals.webpackStats.toJson().assetsByChunkName,
    publicPath: '/assets/',
    dll: 'vendors.dll.js'
  }));
});

app.use(logger.requestError);
app.use((err, req, res) => res.send(err));

const server = http.createServer(app);
server.listen(8080, () => {
  logger.info(`Server started with environment: ${app.settings.env}`);
  logger.info(`Server started on: ${server.address().address}:${server.address().port}`);
});
