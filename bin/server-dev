#!/usr/bin/env node

/* eslint-disable comma-dangle, import/no-dynamic-require, global-require */
const path = require('path');
const express = require('express');
const http = require('http');
const getPort = require('get-port');
const opn = require('opn');

const webpack = require('webpack');
const webpackDevMiddleware = require('webpack-dev-middleware');
const webpackHotMiddleware = require('webpack-hot-middleware');
const logger = require('./utils/logger')({ json: false });

const webpackClientConfig = require('../config/webpack/client.config');
const webpackServerConfig = require('../config/webpack/server.config');

// HTML Formatter
const html = require('../src/index.html');

let bundledServer;

const compiler = {
  client: webpack(webpackClientConfig({ optimize: false })),
  server: webpack(webpackServerConfig({ optimize: false }))
};

// Keep updating with the newly built bundle
compiler.server.watch({}, (err) => {
  if (!err) {
    const file = '../build/server.js';
    delete require.cache[require.resolve(file)];
    bundledServer = require(file);
  }

  logger.info('Finished building server code');
});

const app = express();

app.set('env', 'DEBUG');

app.use(logger.request);
app.use(webpackDevMiddleware(compiler.client, {
  publicPath: '/assets/',
  noInfo: true,
  serverSideRender: true,
  hot: true
}));
app.use(webpackHotMiddleware(compiler.client));

// Return static files before attending to any unknown route
app.use('/assets', express.static(path.join(__dirname, '../build')));

app.use((req, res) => {
  const { body, preloadedState } = bundledServer.render(req, res);

  res.format({
    html: () => res.send(html({
      body,
      preloadedState,
      manifest: res.locals.webpackStats.toJson().assetsByChunkName,
      publicPath: '/assets/',
      dll: 'vendors.dll.js'
    })),

    default: () => res.json({ body, preloadedState }),
  });
});

app.use(logger.requestError);
app.use((err, req, res) => res.send(err));


const server = http.createServer(app);
getPort(8080).then(port => server.listen(port, () => {
  logger.info(`Server started with environment: ${app.settings.env}`);
  logger.info(`Server started on: ${server.address().address}:${server.address().port}`);
  opn(`http://localhost:${server.address().port}`);
}));
