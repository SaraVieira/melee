#!/usr/bin/env node

/* eslint-disable comma-dangle */
const express = require('express');
const path = require('path');
const http = require('http');
const logger = require('./utils/logger');
const html = require('../src/index.html');

const app = express();

// @NOTE this requires only work after the first build
// @TODO find a way to validate that a correct build is present
const clientManifest = require('../build/client.manifest.json');
const bundledServer = require('../build/server.js');


app.set('env', process.env.NODE_ENV || 'production');
app.set('x-powered-by', false);
app.use(logger.request);

// Healthcheck
app.get('/boilerplate/v1/health', (req, res) => res.format({
  text: () => res.send('OK'),
  html: () => res.send('<p>OK</p>'),
  json: () => res.json({ status: 'OK' }),
  default: () => res.json({ status: 'OK' })
}));

// Static Files
app.use('/assets', express.static(path.join(__dirname, '../build')));

// React Application Code
app.use((req, res) => res
  .status(200)
  .send(html({
    manifest: clientManifest.assetsByChunkName,
    publicPath: '/assets/',
    body: bundledServer.render(req, res)
  }))
);

// Log and handle errors
app.use(logger.requestError);
app.use((err, req, res) => res.send(err));

const server = http.createServer(app);
server.listen(8080, () => {
  logger.info(`Server started with environment: ${app.settings.env}`);
  logger.info(`Server started on: ${server.address().address}:${server.address().port}`);
});
