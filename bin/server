#!/usr/bin/env node

/* eslint-disable comma-dangle */
const express = require('express');
const path = require('path');
const http = require('http');
const config = require('config');
const Statful = require('statful-client');

const gce = require('./utils/gce');
const logger = require('./utils/logger')({ json: true });
const html = require('../src/index.html');

const app = express();
const statful = new Statful(config.get('statful'));

// @NOTE this requires only work after the first build
// @TODO find a way to validate that a correct build is present
const clientManifest = require('../build/client.manifest.json');
const bundledServer = require('../build/server.js');

// @SEE https://expressjs.com/en/advanced/best-practice-performance.html#in-environment
app.set('env', 'production');
app.set('x-powered-by', false);
app.use(logger.request);

// Healthcheck
app.get('/boilerplate/v1/health', (req, res) => res.format({
  text: () => res.send('OK'),
  html: () => res.send('<p>OK</p>'),
  json: () => res.json({ status: 'OK' }),
  default: () => res.json({ status: 'OK' })
}));

// Static Files
app.use('/assets', express.static(path.join(__dirname, '../build')));

// React Application Code
app.use((req, res) => {
  const { body, preloadedState } = bundledServer.render(req, res);
  const manifest = clientManifest.assetsByChunkName;

  return res.format({

    html: () => res.send(html({
      manifest,
      publicPath: '/assets/',
      body,
      preloadedState
    })),

    default: () => res.json({
      manifest,
      publicPath: '/assets/',
      body,
      preloadedState
    })
  });
});

// Log and handle errors
app.use(logger.requestError);
app.use((err, req, res) => res.send(err));

const server = http.createServer(app);

server.listen(config.get('port'), () => {
  logger.info(`Express started in production mode: ${app.settings.env === 'production'}`);
  logger.info(`Server loaded configuration for environment: ${config.util.getEnv('NODE_ENV')}`, config);
  logger.info(`Server started on: ${server.address().address}:${server.address().port}`, server.address());

  // Fetch Google Cloud Metadata
  gce().then(({ zone, region }) => {
    statful.tags.zone = zone;
    statful.tags.region = region;

    statful.counter('application_start', 1, { sample_rate: 100 });
  })
  .catch((e) => {
    logger.error(e);
    statful.counter('application_start_error', 1, { sample_rage: 100 });
  });
});
