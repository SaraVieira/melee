#!/usr/bin/env node

/* eslint-disable comma-dangle */
const express = require('express');
const path = require('path');
const http = require('http');
const config = require('config');

const logger = require('./utils/logger')({ json: true });
const html = require('../src/index.html');
const json = require('../src/index.json');

const app = express();

// @NOTE this requires only work after the first build
// @TODO find a way to validate that a correct build is present
const clientManifest = require('../build/client.manifest.json');
const bundledServer = require('../build/server.js');

// @SEE https://expressjs.com/en/advanced/best-practice-performance.html#in-environment
app.set('env', 'production');
app.set('x-powered-by', false);
app.use(logger.request);

// Healthcheck
app.get(`${config.get('publicPath')}v1/health`, (req, res) =>
  res.format({
    text: () => res.send('OK'),
    html: () => res.send('<p>OK</p>'),
    json: () => res.json({ status: 'OK' }),
    default: () => res.json({ status: 'OK' }),
  })
);

// Static Files
app.use(
  config.get('publicPath'),
  express.static(path.join(__dirname, '../build'))
);

// React Application Code
app.get('*', (req, res, next) =>
  bundledServer
    .render(req, res)
    .then(({ body, preloadedState }) => {
      const payload = {
        body,
        preloadedState,
        manifest: clientManifest.assetsByChunkName,
        publicPath: config.get('publicPath'),
        prefix: config.get('prefix'),
        title: config.get('title'),
      };

      return res.format({
        json: () => res.send(json(payload)),
        html: () => res.send(html(payload)),
        default: () => res.json(json(payload)),
      });
    })
    .catch(next)
);

// Log and handle errors
app.use(logger.requestError);
app.use((err, req, res) => res.send(err));

const server = http.createServer(app);

server.listen(config.get('port'), () => {
  logger.debug(
    `Express started in production mode: ${app.settings.env === 'production'}`
  );
  logger.debug(
    `Server loaded configuration for environment: ${config.util.getEnv('NODE_ENV')}`,
    config
  );
  logger.info(
    `Server started on: ${server.address().address}:${server.address().port}`,
    server.address()
  );
});
